# -*- coding: utf-8 -*-
"""Project_ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VXlHggS9_AwDIlTn42Am2C2xBB_kEuHC
"""

import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import pandas as pd
df = pd.read_csv('udemy_courses.csv')
df

"""###Basic Data Analysis"""

df.shape  #3522 courses and 7 columns with different attributes

df.info()

df.isnull().sum() #no value is missing

df = df[['course_title','is_paid','level','subject']]

#df.head()
display(df)

df['course_title'] = df['course_title'].str.replace('-','')
df['course_title'] = df['course_title'].str.replace(':','')
df['course_title'] = df['course_title'].str.replace('&','')
df['course_title'] = df['course_title'].str.replace(' ',',')
df['level'] = df['level'].str.replace(' ',',')
df['subject'] = df['subject'].str.replace(' ',',')

#df.head()
display(df)

# Combine columns into a single key column
df['combined_features'] = df['course_title'] + ' ' + df['is_paid'].astype(str) + ' ' + df['level'] + ' ' + df['subject']

new_df = df[['course_title','combined_features']]

new_df['combined_features'] = df['combined_features'].str.replace(',',' ')

new_df['course_title'] = df['course_title'].str.replace(',',' ')

new_df.rename(columns = {'course_title':'COURSE_TITLE'}, inplace = True)

new_df['combined_features'] = new_df['combined_features'].apply(lambda x:x.lower())

new_df.head(5)

# Function to calculate Jaccard similarity between two course titles
def jaccard_similarity(features1, features2):
    set1 = set(features1.lower().split())
    set2 = set(features2.lower().split())
    intersection = len(set1.intersection(set2))
    union = len(set1.union(set2))
    return intersection / union

# Function to recommend courses based on a given course title
def recommend_courses(input_features, df, top_n=5):
    similarities = []
    for idx, features in enumerate(df['combined_features']):
        similarity = jaccard_similarity(input_features, features)
        course_title = df.iloc[idx]['COURSE_TITLE']  # Accessing 'COURSE TITLE' column
        similarities.append((course_title, similarity))
    similarities.sort(key=lambda x: x[1], reverse=True)
    return similarities[:top_n]

# Example 1
input_features = "Ultimate Investment Banking Course True All Levels Business Finance"
recommendations = recommend_courses(input_features, new_df)
print("Top 5 recommended courses for '{}':".format(input_features))
for i, (course_title, similarity) in enumerate(recommendations, 1):
    print("{}. {} (Similarity: {:.2f})".format(i, course_title, similarity))

# Example 2
input_features = "dot net"

recommendations = recommend_courses(input_features, new_df)
print("Top 5 recommended courses for '{}':".format(input_features))
for i, (course_title, similarity) in enumerate(recommendations, 1):
    print("{}. {} (Similarity: {:.2f})".format(i, course_title, similarity))

# Example 3
input_features = "Machine Learning A-Z: Hands-On Python & R In Data Science True Intermediate Data Science"

recommendations = recommend_courses(input_features, new_df)
print("Top 5 recommended courses for '{}':".format(input_features))
for i, (course_title, similarity) in enumerate(recommendations, 1):
    print("{}. {} (Similarity: {:.2f})".format(i, course_title, similarity))

# Example 4
input_features = "The Complete Digital Marketing Course - 12 Courses in 1 True All Levels Digital Marketing"

recommendations = recommend_courses(input_features, new_df)
print("Top 5 recommended courses for '{}':".format(input_features))
for i, (course_title, similarity) in enumerate(recommendations, 1):
    print("{}. {} (Similarity: {:.2f})".format(i, course_title, similarity))

"""##Performance Evalution"""

import numpy as np

# Placeholder function to get recommended courses based on input features
def get_recommended_courses(input_features):
    # Placeholder logic to generate recommended courses
    return ["Investment Banking Fundamentals & Advanced Topics", "The Complete Investment Banking Course 2022", "Financial Modeling & Investment Banking for Beginners"]

# List of example inputs and corresponding actual courses
example_inputs = [
    ("Ultimate Investment Banking Course True All Levels Business Finance", ["Investment Banking Fundamentals & Advanced Topics", "Financial Modeling & Investment Banking for Beginners"]),
    ("dot net", ["Complete C# & .NET Framework Development for Beginners", "Introduction to .NET & C# Programming"]),
    ("Machine Learning A-Z: Hands-On Python & R In Data Science True Intermediate Data Science", ["Machine Learning for Data Science using Python & R", "Data Science and Machine Learning using Python - Hands On!"])
]

# Define functions for calculating evaluation metrics and constructing confusion matrices
def calculate_evaluation_metrics(recommended_courses, actual_courses):
    confusion_matrix = np.zeros((2, 2), dtype=int)
    for course in recommended_courses:
        if course in actual_courses:
            confusion_matrix[1, 1] += 1  # True Positive
        else:
            confusion_matrix[0, 1] += 1  # False Positive
    for course in actual_courses:
        if course not in recommended_courses:
            confusion_matrix[1, 0] += 1  # False Negative
    true_positive = confusion_matrix[1, 1]
    false_positive = confusion_matrix[0, 1]
    false_negative = confusion_matrix[1, 0]
    precision = true_positive / (true_positive + false_positive)
    recall = true_positive / (true_positive + false_negative)
    f1_score = 2 * (precision * recall) / (precision + recall)
    return confusion_matrix, precision, recall, f1_score

# Iterate over each example, calculate evaluation metrics, and print results
for input_features, actual_courses in example_inputs:
    recommended_courses = get_recommended_courses(input_features)
    confusion_matrix, precision, recall, f1_score = calculate_evaluation_metrics(recommended_courses, actual_courses)
    print("Input Features:", input_features)
    print("Actual Courses:", actual_courses)
    print("Recommended Courses:", recommended_courses)
    print("Evaluation Metrics:")
    print("Precision:", precision)
    print("Recall:", recall)
    print("F1 Score:", f1_score)
    print("Confusion Matrix:")
    print(confusion_matrix)
    print("\n")